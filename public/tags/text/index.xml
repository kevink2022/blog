<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Text on Kevin Kelly</title>
    <link>http://localhost:1313/tags/text/</link>
    <description>Recent content in Text on Kevin Kelly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Kevin Kelly (CC BY 4.0)</copyright>
    <lastBuildDate>Fri, 23 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/text/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Blog] After 14 years in the industry, I still find programming difficult</title>
      <link>http://localhost:1313/learning/fourteen_years_still_difficult/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/fourteen_years_still_difficult/</guid>
      <description>After 14 years in the industry, I still find programming difficult An insightful reflection in the midst of a career software, along with some practical lessons.&#xA;Related Hacker News Discussion </description>
      <content:encoded><![CDATA[<h3 id="after-14-years-in-the-industry-i-still-find-programming-difficulthttpswwwpigleicomarticlesen-programming-is-still-hard-after-14-years"><a href="https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/">After 14 years in the industry, I still find programming difficult</a></h3>
<p>An insightful reflection in the midst of a career software, along with some practical lessons.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://news.ycombinator.com/item?id=39480605">Hacker News Discussion</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Article] [Essentials] 10 Things Software Developers Should Learn about Learning</title>
      <link>http://localhost:1313/learning/ten_things_about_learning/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/ten_things_about_learning/</guid>
      <description>10 Things Software Developers Should Learn about Learning In an industry where constant learning is so important, maybe we should think a little bit about how we&amp;rsquo;re learning before we spend our lives doing it.&#xA;Related PDF Version Hacker News Discussion </description>
      <content:encoded><![CDATA[<h3 id="10-things-software-developers-should-learn-about-learninghttpscacmacmorgresearch10-things-software-developers-should-learn-about-learning"><a href="https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/">10 Things Software Developers Should Learn about Learning</a></h3>
<p>In an industry where constant learning is so important, maybe we should think a little bit about how we&rsquo;re learning before we spend our lives doing it.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/3584859">PDF Version</a></li>
<li><a href="https://news.ycombinator.com/item?id=38777647">Hacker News Discussion</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Style Guide] Brooklyn Data Co. SQL style guide</title>
      <link>http://localhost:1313/learning/brooklyn_data_sql_style_guide/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/brooklyn_data_sql_style_guide/</guid>
      <description>Brooklyn Data Co. SQL style guide A style guide? Well, if you work on SQL, I highly recommend checking it out. But even if you don&amp;rsquo;t, a lot can be learned from the intention of each guideline. I really appreciate how every decision made in this guide had a specific intention, with a huge focus on making as many of the developers decisions explicit to future readers.&#xA;If anything, I at least would like you to appreciate this quote that kicks off the style guide, and that I am sure my colleagues have heard enough of:</description>
      <content:encoded><![CDATA[<h3 id="brooklyn-data-co-sql-style-guidehttpsgithubcombrooklyn-datacoblobmainsql_style_guidemd"><a href="https://github.com/brooklyn-data/co/blob/main/sql_style_guide.md">Brooklyn Data Co. SQL style guide</a></h3>
<p>A style guide? Well, if you work on SQL, I highly recommend checking it out. But even if you don&rsquo;t, a lot can be learned from the <em>intention</em> of each guideline. I really appreciate how every decision made in this guide had a specific intention, with a huge focus on making as many of the developers decisions <em>explicit</em> to future readers.</p>
<p>If anything, I at least would like you to appreciate this quote that kicks off the style guide, and that I am sure my colleagues have heard enough of:</p>
<blockquote>
<p>&ldquo;Newlines are cheap; people&rsquo;s time is expensive.&rdquo;</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] John Carmack on Inlined Code</title>
      <link>http://localhost:1313/learning/john_carmack_inlining/</link>
      <pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/john_carmack_inlining/</guid>
      <description>John Carmack on Inlined Code A legend going over an the often ignored drawbacks of treating best practices, like organizing separate subroutines into functions, or DRY (don&amp;rsquo;t repeat yourself), like a laws. Then later coming to the conclusion that the real culprit was uncontrolled state mutation all along.</description>
      <content:encoded><![CDATA[<h3 id="john-carmack-on-inlined-codehttpnumber-nonecomblowjohn_carmack_on_inlined_codehtml"><a href="http://number-none.com/blow/john_carmack_on_inlined_code.html">John Carmack on Inlined Code</a></h3>
<p>A legend going over an the often ignored drawbacks of treating best practices, like organizing separate subroutines into functions, or DRY (don&rsquo;t repeat yourself), like a laws. Then later coming to the conclusion that the real culprit was uncontrolled state mutation all along.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] Design is an Island</title>
      <link>http://localhost:1313/learning/design_is_an_island/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/design_is_an_island/</guid>
      <description>Design is an Island Some of the most impactful learning materials aren&amp;rsquo;t the works that change the way you think about a problem, but the works that help align your entire mindset to more accurately represent the current level, domain, or in this case, stage of a project. Kent Beck uses the metaphor of islands in a rising sea to describe two different mindsets: refining a design, or pivoting to a new one.</description>
      <content:encoded><![CDATA[<h3 id="design-is-an-islandhttpstidyfirstsubstackcompdesign-is-an-island"><a href="https://tidyfirst.substack.com/p/design-is-an-island">Design is an Island</a></h3>
<p>Some of the most impactful learning materials aren&rsquo;t the works that change the way you think about a problem, but the works that help align your entire mindset to more accurately represent the current level, domain, or in this case, stage of a project. Kent Beck uses the metaphor of islands in a rising sea to describe two different mindsets: refining a design, or pivoting to a new one.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] Programmers Don&#39;t Read Books -- But You Should</title>
      <link>http://localhost:1313/learning/programmers_should_read_books/</link>
      <pubDate>Mon, 28 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/programmers_should_read_books/</guid>
      <description>Programmers Don&amp;rsquo;t Read Books &amp;ndash; But You Should Jeff Atwood discusses that while the market is flush with bad and boring programming books, finding - then reading - the good ones is still vital to our growth as engineers. Definitely check out his recommended reading list.</description>
      <content:encoded><![CDATA[<h3 id="programmers-dont-read-books----but-you-shouldhttpsblogcodinghorrorcomprogrammers-dont-read-books-but-you-should"><a href="https://blog.codinghorror.com/programmers-dont-read-books-but-you-should/">Programmers Don&rsquo;t Read Books &ndash; But You Should</a></h3>
<p>Jeff Atwood discusses that while the market is flush with bad and boring programming books, finding - then reading - the good ones is still vital to our growth as engineers. Definitely check out his <a href="https://blog.codinghorror.com/recommended-reading-for-developers/">recommended reading list</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Paper] Better Testing, Worse Quality?</title>
      <link>http://localhost:1313/learning/better_testing_worse_quality/</link>
      <pubDate>Sat, 01 Dec 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/better_testing_worse_quality/</guid>
      <description>Better Testing, Worse Quality? Elisabeth Hendrickson tells a story inspired by her own experience as a Quality Assurance manager showing how the downstream effects of organizational structure can lead to the exact opposite of the desired outcomes.</description>
      <content:encoded><![CDATA[<h3 id="better-testing-worse-qualityhttpsciteseerxistpsuedudocumentrepidrep1typepdfdoi309d45cb667d5ce43365bc30a5e82f118f42b4d0"><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=309d45cb667d5ce43365bc30a5e82f118f42b4d0">Better Testing, Worse Quality?</a></h3>
<p>Elisabeth Hendrickson tells a story inspired by her own experience as a Quality Assurance manager showing how the downstream effects of organizational structure can lead to the exact opposite of the desired outcomes.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] In Defense of Not-Invented-Here Syndrome</title>
      <link>http://localhost:1313/learning/defense_of_nih/</link>
      <pubDate>Mon, 01 Oct 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/defense_of_nih/</guid>
      <description>In Defense of Not-Invented-Here Syndrome Not-Invented-Here Syndrome: just like repeating your code, its always terrible. Except when it isn&amp;rsquo;t. Like all software &amp;rsquo;laws,&amp;rsquo; Joel reminds us that everything is context based. Half the reason we learn these rules is so we know when its best to break them.&#xA;Related Hacker News Discussion (2023) </description>
      <content:encoded><![CDATA[<h3 id="in-defense-of-not-invented-here-syndromehttpswwwjoelonsoftwarecom20011014in-defense-of-not-invented-here-syndrome"><a href="https://www.joelonsoftware.com/2001/10/14/in-defense-of-not-invented-here-syndrome/">In Defense of Not-Invented-Here Syndrome</a></h3>
<p>Not-Invented-Here Syndrome: just like repeating your code, its always terrible. Except when it isn&rsquo;t. Like all software &rsquo;laws,&rsquo; Joel reminds us that everything is context based. Half the reason we learn these rules is so we know when its best to break them.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://news.ycombinator.com/item?id=34750382">Hacker News Discussion (2023)</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Paper] Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement</title>
      <link>http://localhost:1313/learning/fixing_problems_before_they_happen/</link>
      <pubDate>Fri, 01 Jun 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/fixing_problems_before_they_happen/</guid>
      <description>Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement A deep look into the common pitfalls of trying to work harder instead of work smarter.</description>
      <content:encoded><![CDATA[<h3 id="nobody-ever-gets-credit-for-fixing-problems-that-never-happened-creating-and-sustaining-process-improvementhttpswebmitedunelsonrwwwrepenningsterman_cmr_su01_pdf"><a href="https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf">Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement</a></h3>
<p>A deep look into the common pitfalls of trying to work harder instead of work smarter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Book] The Mythical Man-Month: Essays on Software Engineering</title>
      <link>http://localhost:1313/learning/the_mythical_man_month/</link>
      <pubDate>Fri, 01 Aug 1975 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/the_mythical_man_month/</guid>
      <description>The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition A classic on software leader, Fred Brooks discusses his experience and the lessons he learned on the IBM OS/360 project. Jeff Atwood says it best on his reading list:&#xA;&amp;ldquo;Computers may change, but people don&amp;rsquo;t.&amp;rdquo;&#xA;&amp;mdash; Jeff Atwood</description>
      <content:encoded><![CDATA[<h3 id="the-mythical-man-month-essays-on-software-engineering-anniversary-editionhttpswwwthriftbookscomwthe-mythical-man-month-essays-on-software-engineering-20th--anniversary-edition_frederick-p-brooks-jr245869"><a href="https://www.thriftbooks.com/w/the-mythical-man-month-essays-on-software-engineering-20th--anniversary-edition_frederick-p-brooks-jr/245869/">The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition</a></h3>
<p>A classic on software leader, Fred Brooks discusses his experience and the lessons he learned on the IBM OS/360 project. Jeff Atwood says it best on his <a href="">reading list</a>:</p>
<blockquote>
<p>&ldquo;Computers may change, but people don&rsquo;t.&rdquo;</p>
<p>&mdash; Jeff Atwood</p>
</blockquote>
]]></content:encoded>
    </item>
  </channel>
</rss>
