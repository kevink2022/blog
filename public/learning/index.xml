<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Learning on Kevin Kelly</title>
    <link>http://localhost:1313/learning/</link>
    <description>Recent content in Learning on Kevin Kelly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Kevin Kelly (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 25 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Blog] Language is a Bottleneck for Thought</title>
      <link>http://localhost:1313/learning/language_is_a_bottleneck/</link>
      <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/language_is_a_bottleneck/</guid>
      <description>Language is a Bottleneck for Thought Marco Giancotti making a great point on how our words really can&amp;rsquo;t express our thoughts. This post has been hugely influential on how I think about learning and understanding.</description>
      <content:encoded><![CDATA[<h3 id="language-is-a-bottleneck-for-thoughthttpsaethermugcompostslanguage-is-a-bottleneck-for-thought"><a href="https://aethermug.com/posts/language-is-a-bottleneck-for-thought">Language is a Bottleneck for Thought</a></h3>
<p>Marco Giancotti making a great point on how our words really can&rsquo;t express our thoughts. This post has been hugely influential on how I think about <a href="/blog/knowing_vs_understanding">learning and understanding</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] After 14 years in the industry, I still find programming difficult</title>
      <link>http://localhost:1313/learning/fourteen_years_still_difficult/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/fourteen_years_still_difficult/</guid>
      <description>After 14 years in the industry, I still find programming difficult An insightful reflection in the midst of a career software, along with some practical lessons.&#xA;Related Hacker News Discussion </description>
      <content:encoded><![CDATA[<h3 id="after-14-years-in-the-industry-i-still-find-programming-difficulthttpswwwpigleicomarticlesen-programming-is-still-hard-after-14-years"><a href="https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/">After 14 years in the industry, I still find programming difficult</a></h3>
<p>An insightful reflection in the midst of a career software, along with some practical lessons.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://news.ycombinator.com/item?id=39480605">Hacker News Discussion</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Article] [Essentials] 10 Things Software Developers Should Learn about Learning</title>
      <link>http://localhost:1313/learning/ten_things_about_learning/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/ten_things_about_learning/</guid>
      <description>10 Things Software Developers Should Learn about Learning In an industry where constant learning is so important, maybe we should think a little bit about how we&amp;rsquo;re learning before we spend our lives doing it.&#xA;Related PDF Version Hacker News Discussion </description>
      <content:encoded><![CDATA[<h3 id="10-things-software-developers-should-learn-about-learninghttpscacmacmorgresearch10-things-software-developers-should-learn-about-learning"><a href="https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/">10 Things Software Developers Should Learn about Learning</a></h3>
<p>In an industry where constant learning is so important, maybe we should think a little bit about how we&rsquo;re learning before we spend our lives doing it.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/3584859">PDF Version</a></li>
<li><a href="https://news.ycombinator.com/item?id=38777647">Hacker News Discussion</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] Code Aesthetic</title>
      <link>http://localhost:1313/learning/code_aesthetic/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/code_aesthetic/</guid>
      <description>Great introduction to many different programming concepts. Highly recommend watching the whole channel, only 90 minutes on YouTube so far. Some of my favorites:&#xA;Why You Shouldn&amp;rsquo;t Nest Your Code Highlights how simply limiting the amount you nest your code will force you to write better code.&#xA;Don&amp;rsquo;t Write Comments In a similar way to nesting, shows how most comments can be eliminated by writing code that [reads like a language].</description>
      <content:encoded><![CDATA[<p>Great introduction to many different programming concepts. Highly recommend watching the whole channel, only 90 minutes on YouTube so far. Some of my favorites:</p>
<h3 id="why-you-shouldnt-nest-your-codehttpswwwyoutubecomwatchvcfrhgnuxg-4"><a href="https://www.youtube.com/watch?v=CFRhGnuXG-4">Why You Shouldn&rsquo;t Nest Your Code</a></h3>
<p>Highlights how simply limiting the amount you nest your code will force you to write better code.</p>
<h3 id="dont-write-commentshttpswwwyoutubecomwatchvbf7vdbbobua"><a href="https://www.youtube.com/watch?v=Bf7vDBBOBUA">Don&rsquo;t Write Comments</a></h3>
<p>In a similar way to nesting, shows how most comments can be eliminated by writing code that [reads like a language].</p>
<h3 id="dependency-injection-the-best-patternhttpswwwyoutubecomcodeaestheticvideos"><a href="https://www.youtube.com/@CodeAesthetic/videos">Dependency Injection, The Best Pattern</a></h3>
<p>Great visualization and introduction to the many strengths and benefits of dependency injection.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] Design in Practice</title>
      <link>http://localhost:1313/learning/design_in_practice/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/design_in_practice/</guid>
      <description>Design in Practice Practical tools and methodologies that Rich and the Clojure/Datomic teams use in their design process, along with real world examples, such and project glossaries and the decision matrix.</description>
      <content:encoded><![CDATA[<h3 id="design-in-practicehttpswwwyoutubecomwatchvc5qf2hjhlset1s"><a href="https://www.youtube.com/watch?v=c5QF2HjHLSE&amp;t=1s">Design in Practice</a></h3>
<p>Practical tools and methodologies that Rich and the Clojure/Datomic teams use in their design process, along with real world examples, such and project glossaries and the decision matrix.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Style Guide] Brooklyn Data Co. SQL style guide</title>
      <link>http://localhost:1313/learning/brooklyn_data_sql_style_guide/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/brooklyn_data_sql_style_guide/</guid>
      <description>Brooklyn Data Co. SQL style guide A style guide? Well, if you work on SQL, I highly recommend checking it out. But even if you don&amp;rsquo;t, a lot can be learned from the intention of each guideline. I really appreciate how every decision made in this guide had a specific intention, with a huge focus on making as many of the developers decisions explicit to future readers.&#xA;If anything, I at least would like you to appreciate this quote that kicks off the style guide, and that I am sure my colleagues have heard enough of:</description>
      <content:encoded><![CDATA[<h3 id="brooklyn-data-co-sql-style-guidehttpsgithubcombrooklyn-datacoblobmainsql_style_guidemd"><a href="https://github.com/brooklyn-data/co/blob/main/sql_style_guide.md">Brooklyn Data Co. SQL style guide</a></h3>
<p>A style guide? Well, if you work on SQL, I highly recommend checking it out. But even if you don&rsquo;t, a lot can be learned from the <em>intention</em> of each guideline. I really appreciate how every decision made in this guide had a specific intention, with a huge focus on making as many of the developers decisions <em>explicit</em> to future readers.</p>
<p>If anything, I at least would like you to appreciate this quote that kicks off the style guide, and that I am sure my colleagues have heard enough of:</p>
<blockquote>
<p>&ldquo;Newlines are cheap; people&rsquo;s time is expensive.&rdquo;</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] John Carmack on Inlined Code</title>
      <link>http://localhost:1313/learning/john_carmack_inlining/</link>
      <pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/john_carmack_inlining/</guid>
      <description>John Carmack on Inlined Code A legend going over an the often ignored drawbacks of treating best practices, like organizing separate subroutines into functions, or DRY (don&amp;rsquo;t repeat yourself), like a laws. Then later coming to the conclusion that the real culprit was uncontrolled state mutation all along.</description>
      <content:encoded><![CDATA[<h3 id="john-carmack-on-inlined-codehttpnumber-nonecomblowjohn_carmack_on_inlined_codehtml"><a href="http://number-none.com/blow/john_carmack_on_inlined_code.html">John Carmack on Inlined Code</a></h3>
<p>A legend going over an the often ignored drawbacks of treating best practices, like organizing separate subroutines into functions, or DRY (don&rsquo;t repeat yourself), like a laws. Then later coming to the conclusion that the real culprit was uncontrolled state mutation all along.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] [Essentials] Design, Composition, and Performance</title>
      <link>http://localhost:1313/learning/design_composition_performance/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/design_composition_performance/</guid>
      <description>Design, Composition, and Performance Building maintainable, composable software not only requires building up levels of abstractions, but being acutely aware of which level of the of the system were working on, and having the mindset to match. Rich Hickey makes a brilliant connection to the different components that go into an orchestral performance: from the composer at the top, to the individual performers, the instruments they play, and the people who designed and crafted those instruments in the first place.</description>
      <content:encoded><![CDATA[<h3 id="design-composition-and-performancehttpswwwyoutubecomwatchvqcwqnjxqfmy"><a href="https://www.youtube.com/watch?v=QCwqnjxqfmY">Design, Composition, and Performance</a></h3>
<p>Building maintainable, composable software not only requires building up levels of abstractions, but being acutely aware of which level of the of the system were working on, and having the mindset to match. Rich Hickey makes a brilliant connection to the different components that go into an orchestral performance: from the composer at the top, to the individual performers, the instruments they play, and the people who designed and crafted those instruments in the first place.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] Simplicity Matters</title>
      <link>http://localhost:1313/learning/simplicity_matters/</link>
      <pubDate>Wed, 25 Apr 2012 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/simplicity_matters/</guid>
      <description>Simplicity Matters A followup on the ideas of Simple Made Easy with some more concrete examples of the dangers you run into if you aren&amp;rsquo;t vigilant about simplicity and the opportunities you get when you are. Followed by a breakdown of many of the constructs we use, and whether they have a simple nature or not.&#xA;Related [[simple_made_easy|Simple Made Easy]] </description>
      <content:encoded><![CDATA[<h3 id="simplicity-mattershttpswwwyoutubecomwatchvri8tnmsozo0"><a href="https://www.youtube.com/watch?v=rI8tNMsozo0">Simplicity Matters</a></h3>
<p>A followup on the ideas of Simple Made Easy with some more concrete examples of the dangers you run into if you aren&rsquo;t vigilant about simplicity and the opportunities you get when you are. Followed by a breakdown of many of the constructs we use, and whether they have a simple nature or not.</p>
<h3 id="related">Related</h3>
<ul>
<li>[[simple_made_easy|Simple Made Easy]]</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] [Essentials] Simple Made Easy</title>
      <link>http://localhost:1313/learning/simple_made_easy/</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/simple_made_easy/</guid>
      <description>Simple Made Easy An absolute classic, which I have watched at least once a month since I first saw it. I think anyone writing software without understanding the fundamental difference between simple and easy that Rich articulates in this talk is destined to make some serious mistakes. This general concept of simple vs easy has to be the biggest influence on how I think not just about software, but pretty much everything, and it was the key that finally unblocked me from writing large systems without inevitable &amp;lsquo;inviting the elephant&amp;rsquo; as Rich describes in 2012 follow-up Simplicity Matters.</description>
      <content:encoded><![CDATA[<h3 id="simple-made-easyhttpswwwyoutubecomwatchvsxdougdseq4"><a href="https://www.youtube.com/watch?v=SxdOUGdseq4">Simple Made Easy</a></h3>
<p>An absolute classic, which I have watched at least once a month since I first saw it. I think anyone writing software without understanding the fundamental difference between simple and easy that Rich articulates in this talk is destined to make some serious mistakes. This general concept of simple vs easy has to be the biggest influence on how I think not just about software, but pretty much everything, and it was the key that finally unblocked me from writing large systems without inevitable &lsquo;inviting the elephant&rsquo; as Rich describes in 2012 follow-up Simplicity Matters.</p>
<h3 id="related">Related</h3>
<ul>
<li>[[simplicity_matters|Simplicity Matters]]</li>
</ul>
<h3 id="notes">Notes</h3>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] Hammock Driven Development</title>
      <link>http://localhost:1313/learning/hammock_driven_development/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/hammock_driven_development/</guid>
      <description>Hammock Driven Development Rich Hickey goes into the details about how he solves hard problems by utilizing the part of our brains that evolution created for to the deep connections abstractions require: the background brain.</description>
      <content:encoded><![CDATA[<h3 id="hammock-driven-developmenthttpswwwyoutubecomwatchvf84n5ofozbc"><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development</a></h3>
<p>Rich Hickey goes into the details about how he solves hard problems by utilizing the part of our brains that evolution created for to the deep connections abstractions require: the background brain.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Video] [Essentials] Are We There Yet?</title>
      <link>http://localhost:1313/learning/are_we_there_yet/</link>
      <pubDate>Thu, 17 Sep 2009 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/are_we_there_yet/</guid>
      <description>Are We There Yet Rich Hickey goes into some of the flaws with how data is represented in object oriented programming and by clarifying the differences between value, time, identity, and state. Then he introduces a new mental model, inspired by mathematician and philosopher Alfred North Whitehead, that does.</description>
      <content:encoded><![CDATA[<h3 id="are-we-there-yethttpswwwyoutubecomwatchvscepu1cs4l0"><a href="https://www.youtube.com/watch?v=ScEPu1cs4l0">Are We There Yet</a></h3>
<p>Rich Hickey goes into some of the flaws with how data is represented in object oriented programming and by clarifying the differences between value, time, identity, and state. Then he introduces a new mental model, inspired by mathematician and philosopher <a href="https://en.wikipedia.org/wiki/Alfred_North_Whitehead">Alfred North Whitehead</a>, that does.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] Design is an Island</title>
      <link>http://localhost:1313/learning/design_is_an_island/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/design_is_an_island/</guid>
      <description>Design is an Island Some of the most impactful learning materials aren&amp;rsquo;t the works that change the way you think about a problem, but the works that help align your entire mindset to more accurately represent the current level, domain, or in this case, stage of a project. Kent Beck uses the metaphor of islands in a rising sea to describe two different mindsets: refining a design, or pivoting to a new one.</description>
      <content:encoded><![CDATA[<h3 id="design-is-an-islandhttpstidyfirstsubstackcompdesign-is-an-island"><a href="https://tidyfirst.substack.com/p/design-is-an-island">Design is an Island</a></h3>
<p>Some of the most impactful learning materials aren&rsquo;t the works that change the way you think about a problem, but the works that help align your entire mindset to more accurately represent the current level, domain, or in this case, stage of a project. Kent Beck uses the metaphor of islands in a rising sea to describe two different mindsets: refining a design, or pivoting to a new one.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] Programmers Don&#39;t Read Books -- But You Should</title>
      <link>http://localhost:1313/learning/programmers_should_read_books/</link>
      <pubDate>Mon, 28 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/programmers_should_read_books/</guid>
      <description>Programmers Don&amp;rsquo;t Read Books &amp;ndash; But You Should Jeff Atwood discusses that while the market is flush with bad and boring programming books, finding - then reading - the good ones is still vital to our growth as engineers. Definitely check out his recommended reading list.</description>
      <content:encoded><![CDATA[<h3 id="programmers-dont-read-books----but-you-shouldhttpsblogcodinghorrorcomprogrammers-dont-read-books-but-you-should"><a href="https://blog.codinghorror.com/programmers-dont-read-books-but-you-should/">Programmers Don&rsquo;t Read Books &ndash; But You Should</a></h3>
<p>Jeff Atwood discusses that while the market is flush with bad and boring programming books, finding - then reading - the good ones is still vital to our growth as engineers. Definitely check out his <a href="https://blog.codinghorror.com/recommended-reading-for-developers/">recommended reading list</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Paper] Better Testing, Worse Quality?</title>
      <link>http://localhost:1313/learning/better_testing_worse_quality/</link>
      <pubDate>Sat, 01 Dec 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/better_testing_worse_quality/</guid>
      <description>Better Testing, Worse Quality? Elisabeth Hendrickson tells a story inspired by her own experience as a Quality Assurance manager showing how the downstream effects of organizational structure can lead to the exact opposite of the desired outcomes.</description>
      <content:encoded><![CDATA[<h3 id="better-testing-worse-qualityhttpsciteseerxistpsuedudocumentrepidrep1typepdfdoi309d45cb667d5ce43365bc30a5e82f118f42b4d0"><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=309d45cb667d5ce43365bc30a5e82f118f42b4d0">Better Testing, Worse Quality?</a></h3>
<p>Elisabeth Hendrickson tells a story inspired by her own experience as a Quality Assurance manager showing how the downstream effects of organizational structure can lead to the exact opposite of the desired outcomes.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Blog] In Defense of Not-Invented-Here Syndrome</title>
      <link>http://localhost:1313/learning/defense_of_nih/</link>
      <pubDate>Mon, 01 Oct 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/defense_of_nih/</guid>
      <description>In Defense of Not-Invented-Here Syndrome Not-Invented-Here Syndrome: just like repeating your code, its always terrible. Except when it isn&amp;rsquo;t. Like all software &amp;rsquo;laws,&amp;rsquo; Joel reminds us that everything is context based. Half the reason we learn these rules is so we know when its best to break them.&#xA;Related Hacker News Discussion (2023) </description>
      <content:encoded><![CDATA[<h3 id="in-defense-of-not-invented-here-syndromehttpswwwjoelonsoftwarecom20011014in-defense-of-not-invented-here-syndrome"><a href="https://www.joelonsoftware.com/2001/10/14/in-defense-of-not-invented-here-syndrome/">In Defense of Not-Invented-Here Syndrome</a></h3>
<p>Not-Invented-Here Syndrome: just like repeating your code, its always terrible. Except when it isn&rsquo;t. Like all software &rsquo;laws,&rsquo; Joel reminds us that everything is context based. Half the reason we learn these rules is so we know when its best to break them.</p>
<h3 id="related">Related</h3>
<ul>
<li><a href="https://news.ycombinator.com/item?id=34750382">Hacker News Discussion (2023)</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>[Paper] Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement</title>
      <link>http://localhost:1313/learning/fixing_problems_before_they_happen/</link>
      <pubDate>Fri, 01 Jun 2001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/fixing_problems_before_they_happen/</guid>
      <description>Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement A deep look into the common pitfalls of trying to work harder instead of work smarter.</description>
      <content:encoded><![CDATA[<h3 id="nobody-ever-gets-credit-for-fixing-problems-that-never-happened-creating-and-sustaining-process-improvementhttpswebmitedunelsonrwwwrepenningsterman_cmr_su01_pdf"><a href="https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf">Nobody Ever Gets Credit for Fixing Problems that Never Happened: Creating and Sustaining Process Improvement</a></h3>
<p>A deep look into the common pitfalls of trying to work harder instead of work smarter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[Book] The Mythical Man-Month: Essays on Software Engineering</title>
      <link>http://localhost:1313/learning/the_mythical_man_month/</link>
      <pubDate>Fri, 01 Aug 1975 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/the_mythical_man_month/</guid>
      <description>The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition A classic on software leader, Fred Brooks discusses his experience and the lessons he learned on the IBM OS/360 project. Jeff Atwood says it best on his reading list:&#xA;&amp;ldquo;Computers may change, but people don&amp;rsquo;t.&amp;rdquo;&#xA;&amp;mdash; Jeff Atwood</description>
      <content:encoded><![CDATA[<h3 id="the-mythical-man-month-essays-on-software-engineering-anniversary-editionhttpswwwthriftbookscomwthe-mythical-man-month-essays-on-software-engineering-20th--anniversary-edition_frederick-p-brooks-jr245869"><a href="https://www.thriftbooks.com/w/the-mythical-man-month-essays-on-software-engineering-20th--anniversary-edition_frederick-p-brooks-jr/245869/">The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition</a></h3>
<p>A classic on software leader, Fred Brooks discusses his experience and the lessons he learned on the IBM OS/360 project. Jeff Atwood says it best on his <a href="">reading list</a>:</p>
<blockquote>
<p>&ldquo;Computers may change, but people don&rsquo;t.&rdquo;</p>
<p>&mdash; Jeff Atwood</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>[Podcast] The Idealcast with Gene Kim</title>
      <link>http://localhost:1313/learning/idealcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/learning/idealcast/</guid>
      <description>The Idealcast with Gene Kim Gene Kim brings technology and business leaders on to to share their insights and mental models with the world. The guests that have really shaped my understanding of organizations are listed below:&#xA;Elisabeth Hendrickson Episode 3: Achieving Better Outcomes through Structure Episode 4: (Dispatch from the Scenius) Elisabeth Hendrickson&amp;rsquo;s DevOps Enterprise Summit Presentations Dr. Steven Spear Episode 5: The Pursuit of Perfection: Dominant Architectures and Dynamics (Part 1) Episode 6: (Dispatch from the Scenius) Dr.</description>
      <content:encoded><![CDATA[<h3 id="the-idealcast-with-gene-kimhttpsitrevolutioncompodcast"><a href="https://itrevolution.com/podcast/">The Idealcast with Gene Kim</a></h3>
<p>Gene Kim brings technology and business leaders on to to share their insights and mental models with the world. The guests that have really shaped my understanding of organizations are listed below:</p>
<h3 id="elisabeth-hendrickson">Elisabeth Hendrickson</h3>
<ul>
<li>Episode 3: Achieving Better Outcomes through Structure</li>
<li>Episode 4: (Dispatch from the Scenius) Elisabeth Hendrickson&rsquo;s DevOps Enterprise Summit Presentations</li>
</ul>
<h3 id="dr-steven-spear">Dr. Steven Spear</h3>
<ul>
<li>Episode 5: The Pursuit of Perfection: Dominant Architectures and Dynamics (Part 1)</li>
<li>Episode 6: (Dispatch from the Scenius) Dr. Steve Spear&rsquo;s 2019 and 2020 DevOps Enterprise Summit Talks on Rapid, Distributed, Dynamic Learning.</li>
<li>Episode 7: The Topography of Problems and the Importance of Distributed Problem Solving (Part 2)</li>
</ul>
<h3 id="dr-ron-westrum">Dr. Ron Westrum</h3>
<ul>
<li>Episode 17: The Sociology and Typologies of Organizations, and Technical Maestros with Dr. Ron Westrum</li>
<li>Episode 18: Patterns of Generative Cultures: How They Can Be Destroyed and the Importance of Trust with Dr. Ron Westrum</li>
</ul>
<h3 id="scott-havens">Scott Havens</h3>
<ul>
<li>Episode 22: (Dispatch from the Scenius) Fabulous Fortunes, Fewer Failures, and Faster Fixes from Functional Fundamentals</li>
<li>Episode 23: Simplifying The Inventory Management Systems at the World’s Largest Retailer Using Functional Programming Principles</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
