<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kevin Kelly</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on Kevin Kelly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kevink2019@gmail.com (Kevin Kelly)</managingEditor>
    <webMaster>kevink2019@gmail.com (Kevin Kelly)</webMaster>
    <copyright>Kevin Kelly (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 11 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning</title>
      <link>http://localhost:1313/blog/learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/learning/</guid>
      <description>Rich Hickey&amp;rsquo;s Keynotes My favorite engineer, Rich Hickey presents new ways to think about data and the craft of programming. I consider all these listed ones to be must watches, if your working in software and haven&amp;rsquo;t seen them, you&amp;rsquo;re doing yourself a disservice.&#xA;Make sure you don&amp;rsquo;t mistake easy for simple. Sounds weird? You should watch.&#xA;Other favorites:&#xA;Are We There Yet - A break down state into its fundamental components, giving us a new way to think about data and observation in our digital systems, grounded in the real world.</description>
      <content:encoded><![CDATA[<h3 id="rich-hickeys-keynotes">Rich Hickey&rsquo;s Keynotes</h3>
<p>My favorite engineer, Rich Hickey presents new ways to think about data and the craft of programming. I consider all these listed ones to be must watches, if your working in software and haven&rsquo;t seen them, you&rsquo;re doing yourself a disservice.</p>
<p>

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/SxdOUGdseq4?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

Make sure you don&rsquo;t mistake easy for simple. Sounds weird? You should watch.</p>
<p>Other favorites:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=ScEPu1cs4l0">Are We There Yet</a> - A break down state into its fundamental components, giving us a new way to think about data and observation in our digital systems, grounded in the real world.</li>
<li><a href="https://www.youtube.com/watch?v=QCwqnjxqfmY">Design, Composition, and Performance</a> - Another angle to look at our systems through the analogy of the components that go into musical composition and performance.</li>
<li><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development</a> - A dive into the psychology behind Rich Hickey&rsquo;s problem solving problem process, inspired partly by George Pólya&rsquo;s <em>How to Solve It</em></li>
</ul>
<h3 id="code-complete-2">Code Complete 2</h3>
<p><em>By Scott McConnell</em></p>
<p><a href="https://www.goodreads.com/book/show/4845.Code_Complete"><img src="/blog/images/code_complete_2.jpg" alt="Original Database with coupled file interface"></a></p>
<p>A complete handbook on code construction. If you could only read one book to create readable, maintainable software, this would have to be it. A must read for anyone serious about software.</p>
<h3 id="the-design-of-everyday-things">The Design of Everyday Things</h3>
<p><em>By Don Norman</em></p>
<p><a href="https://www.goodreads.com/book/show/840.The_Design_of_Everyday_Things"><img src="/blog/images/design_of_everyday_things.jpg" alt="Original Database with coupled file interface"></a></p>
<p>A fascinating deep dive into how people actually use and interact with things, packed with great metaphors and design heuristics, teaching you to design <em>for</em> people and their strengths, instead of wishing they were machines.</p>
<h3 id="idealcast">Idealcast</h3>
<p><em>By Gene Kim</em></p>
<p><a href="https://itrevolution.com/podcast/"><img src="/blog/images/idealcast.png" alt="Original Database with coupled file interface"></a></p>
<p>Gene Kim brings technology and business leaders to bring together their perspectives so we can all learn how to build effective teams and organizations to build effective products. Some of my favorite guests include Steven Spear, Elisabeth Hendrickson, and Ron Westrum</p>
<h3 id="refactoring">Refactoring</h3>
<p><em>By Martin Fowler</em></p>
<p><a href="https://www.goodreads.com/book/show/44936.Refactoring"><img src="/blog/images/refactoring.jpg" alt="Original Database with coupled file interface"></a></p>
<p>A deep dive into the science of refactoring, and how to do it like a professional. A great perspective on the many ways we can design systems to be understandable and maintainable. And its where Martin gave the world this gem:</p>
<blockquote>
<p>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”</p>
</blockquote>
<h3 id="codeaesthetic">CodeAesthetic</h3>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CFRhGnuXG-4?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>A catalog high quality, accessible videos that dive into software design concepts, encouraging clean and maintainable code. The first thing I send to anyone looking to take their software quality to the next level.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Resume</title>
      <link>http://localhost:1313/blog/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/resume/</guid>
      <description>Resume PDF Download&#xA;Kevin Kelly kevink2019@gmail.com | GitHub | LinkedIn Software Engineer professionally passionate about how we build software, both as individuals and as organizations. Serious about learning and get excited about the lessons that can be learned from failure.&#xA;Education Pennsylvania State University Bachelor of Science in Computer Engineering University Park, PA August 2019 &amp;ndash; December 2022&#xA;GPA: 3.85/4 Extracurricular learning materials that influence my thinking the most include Rich Hickey&amp;rsquo;s numerous keynotes, Gene Kim&amp;rsquo;s Idealcast, and Scott McConnell&amp;rsquo;s Code Complete 2.</description>
      <content:encoded><![CDATA[<h1 id="resume">Resume</h1>
<p><a href="/blog/docs/resume.pdf">PDF Download</a></p>
<hr>
<h1 id="kevin-kelly">Kevin Kelly</h1>
<p><a href="mailto:kevink2019@gmail.com">kevink2019@gmail.com</a> | <a href="https://github.com/kevink2022">GitHub</a> | <a href="https://www.linkedin.com/in/kevink2019/">LinkedIn</a>
Software Engineer professionally passionate about how we build software, both as individuals and as organizations. Serious about learning and get excited about the lessons that can be learned from failure.</p>
<hr>
<h2 id="education">Education</h2>
<h4 id="pennsylvania-state-universityhttpsbulletinspsueduundergraduatecollegesengineeringcomputer-engineering-bs"><a href="https://bulletins.psu.edu/undergraduate/colleges/engineering/computer-engineering-bs/">Pennsylvania State University</a></h4>
<p><em>Bachelor of Science in Computer Engineering</em>
University Park, PA
August 2019 &ndash; December 2022</p>
<ul>
<li>GPA: <strong>3.85</strong>/4
<ul>
<li>Extracurricular learning materials that influence my thinking the most include Rich Hickey&rsquo;s numerous keynotes, Gene Kim&rsquo;s <em>Idealcast</em>, and Scott McConnell&rsquo;s <em>Code Complete 2</em>.</li>
</ul>
</li>
</ul>
<hr>
<h2 id="experience">Experience</h2>
<h4 id="fast-enterpriseshttpswwwfastenterprisescom"><a href="https://www.fastenterprises.com/">FAST Enterprises</a></h4>
<p><em>Implementation Consultant</em>
Sacramento, CA
July 2022 &ndash; Present</p>
<ul>
<li>Effectively communicate with clients to understand their business requests, discuss requests to ensure they address root business problems, and created tailored solutions within the FAST system, adhering to <strong>object oriented</strong> and internal best practices.</li>
<li>Develop and refactor <strong>SQL</strong> queries with high standards of readability, maintainability, and performance. Ensure SQL query performance through Execution Plan and cardinality statistics analysis.</li>
<li>Deliver confident and impactful client demonstrations and technical presentations, effectively communicating complex technical concepts to audiences of varying levels of technical expertise.</li>
<li>Initiate discussions about and tirelessly advocate for stronger software oriented organizational principles. Examples include adopting style guides for the languages we use, adding unit and integration testing to our testing procedures, and refactoring for future maintainability while making changes.</li>
</ul>
<h4 id="rtd-embedded-technologieshttpswwwrtdcom"><a href="https://www.rtd.com/">RTD Embedded Technologies</a></h4>
<p><em>Engineering Intern</em>
State College, PA
May 2022 &ndash; August 2022</p>
<ul>
<li>Maintained and updated Legacy <strong>Linux Kernel Drivers</strong>, adeptly diagnosing issues and analyzing Linux Kernel Source code to resolve bugs and implement driver updates.</li>
<li>Developed a <strong>Python</strong> tool for automated driver retrieval and testing from repositories, effectively identifying and addressing widespread bugs resulting from Kernel updates.</li>
<li>Diligently adhered to the comprehensive document control protocols required by ISO 9001 and AS9100 standards.</li>
<li>Successfully ported legacy ROM DOS manufacturing tests to Python scripts for Linux, modernizing the PCB production testing process. </li>
</ul>
<hr>
<h2 id="projects">Projects</h2>
<h4 id="boomic-musichttpsgithubcomkevink2022boomic"><a href="https://github.com/kevink2022/Boomic">Boomic Music</a></h4>
<p><em>Swift, SwiftUI, Functional Programming, Persistent Data Structures, Combine, async/await</em>
January 2024 &ndash; Present</p>
<ul>
<li>iOS music playback app for high resolution audio codecs (e.g. FLAC) and music library manager.</li>
<li>Automatically populates the music library through the iOS Files app, allowing for drag and drop. Organizes music into albums and artists based on metadata and displays associated album art.</li>
<li>Built with <strong>persistent data structures</strong> and <strong>functional programming principles</strong> while still taking advantage of SwiftUI&rsquo;s powerful observation libraries using <strong>Combine queues</strong> for efficient, decoupled and reactive communication.</li>
<li>Utilizes a transaction based persistence system, allowing for users to roll back erroneous changes.</li>
<li>Thorough <strong>unit testing</strong>, often following <strong>test driven design</strong>, writing tests before the code.</li>
<li>Architecture and design decisions discussed in detail on my blog at <a href="/blog/tags/boomic/">kevink2022.github.io/blog/tags/boomic/</a></li>
</ul>
<h4 id="channelshttpsgithubcomkevink2022channels"><a href="https://github.com/kevink2022/channels">Channels</a></h4>
<p><em>C, GDB, Valgrind, pthread, semaphores</em>
January 2022 &ndash; May 2022</p>
<ul>
<li>Multi-thread safe buffered channel system enabling threads to send or receive data.</li>
<li>Incorporates a &lsquo;select&rsquo; function enabling threads to submit multiple send/receive operations, ensuring that only one operation is completed.</li>
<li>Implemented in <strong>C</strong>. Employed linked lists for queue management, <strong>mutex locks</strong> for thread safety, and <strong>semaphores</strong> to control access to resources.</li>
<li>Utilized <strong>GDB</strong> and <strong>Valgrind</strong> for debugging and memory safety.</li>
</ul>
<hr>
<h1 id="what-i-am-looking-for-in-a-team">What I am looking for in a team</h1>
<blockquote>
<p>&ldquo;Everything you do you are ignorant about in some way&rdquo;</p>
<p>&mdash; Dr. Steven Spear<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</blockquote>
<p>At this point in my career, my number one priority is to learn as much as possible. I hope this site has been a good representation of that. I have collected the learning materials most influential on my thinking, explored and solidified my understanding through my blog posts, and applied those lessons in my daily work and personal projects.</p>
<p>But what I am missing most is the most powerful learning source of all: a passionate team of fellow learners. I couldn&rsquo;t possibly hope to correct my false assumptions and build a better model of the world any quicker than being surrounded by smart people trying to do the same thing.</p>
<p>I am looking for a team who is hungry for knowledge, and gets excited about the lessons that can be learned from failure. That understands learning and writing software are iterative processes that require constant effort, change, and experimentation. And is aware that in everything they do, they are ignorant about in some way.</p>
<p>What are we doing here if we&rsquo;re not trying to meet interesting people and do interesting things?</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>From Dr. Spear&rsquo;s <a href="https://www.youtube.com/watch?v=h4XMoHhireY">Discovering Your Way to Greatness</a> talk at DevOps Summit 2019. He was talking about how Toyota became the best car manufacturer in the world by admitting their ignorance, and building a culture that attacked it. The exact quote is &ldquo;Everything you do you are ignorant about in some <em>fashion</em>,&rdquo; at 14:08. But <em>some way</em> ended up in my notes, and I like it better now.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/blog/about_me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/about_me/</guid>
      <description>About Me I&amp;rsquo;m a Software Engineer from the Philadelphia area who went to Penn State (very unique, I know), who fell in love with programming in middle school when my awesome math teacher showed the class our calculators could write programs. Before long, I would write the program that would do that night&amp;rsquo;s homework before class ended (thank you again, Mrs. Zapor).&#xA;Outside of that, growing up I was very into sports (go birds), which culminated with me playing Volleyball in high school (go crusaders).</description>
      <content:encoded><![CDATA[<h1 id="about-me">About Me</h1>
<p>I&rsquo;m a Software Engineer from the Philadelphia area who went to Penn State (very unique, I know), who fell in love with programming in middle school when my awesome math teacher showed the class our calculators could write programs. Before long, I would write the program that would do that night&rsquo;s homework before class ended (thank you again, Mrs. Zapor).</p>
<p>Outside of that, growing up I was very into sports (go birds), which culminated with me playing Volleyball in high school (go crusaders). While in high school, I fell in love with art (largely thanks to <a href="https://www.deviantart.com/sulfurbunny/gallery/36148502/victory-fire-book-one">Victory Fire</a>) and music, which led me to learning how to draw and picking the piano up again. Though, shortly after drawing whats probably my <a href="/blog/images/ben_simmons.JPG">best piece</a>, I learned I have <a href="https://en.wikipedia.org/wiki/Aphantasia">aphantasia</a>, and have focused my creative energy more into creative writing as of late.</p>
<p>In college, I knew I wanted to study abroad, and found an engineering program at Tohoku University in Sendai, Japan, where I&rsquo;d do undergraduate research on AI. That gave me enough of a reason to learn Japanese to an intermediate level. Unfortunately, the program was called off due to covid shortly before I was set to leave. But hey, at least I can watch anime while cooking.</p>
<p>Later, sparked by finally watching Game of Thrones and then <a href="https://www.youtube.com/@HistoriaCivilis">Historia Civilis</a> on YouTube, I have become a bit of a history buff. Highly recommend Dan Carlin&rsquo;s <a href="https://www.dancarlin.com/hardcore-history-series/">Hardcore History</a>, <a href="https://therestishistory.supportingcast.fm/">The Rest is History</a> with Tom Holland (not that one) and Dominic Sandbrook, and Mike Duncan&rsquo;s <a href="https://thehistoryofrome.typepad.com/">The History of Rome</a> and <a href="https://thehistoryofrome.typepad.com/revolutions_podcast/">Revolutions</a> to any podcast listeners out there.</p>
<p>I&rsquo;m now living in Sacramento for my first full time job out of college. I recently picked up guitar to go along with piano, have been getting more into cooking to eat healthier, and on have gotten into writing as a medium of thought through this blog.</p>
<p>Feel free to reach out via <a href="mailto:kevink2019@gmail.com">email</a> if there&rsquo;s anything you&rsquo;d like to discuss!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Make your own contract.</title>
      <link>http://localhost:1313/blog/blog/make_your_own_contract/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/blog/make_your_own_contract/</guid>
      <description>I want to talk about a specific problem I just worked on, and how two logically identical solutions can make a huge difference in taming the complexity of software.&#xA;Boiling it down to the essentials, we have a map, or dictionary, of ID objects to Tag objects, called tagMap. This map is built with the following three operations:&#xA;add(id: ID, tags: Set&amp;lt;Tag&amp;gt;) add a new ID with its associated Tag objects (ID is guaranteed to not exist in tagMap) update(id: ID, tags: Set&amp;lt;Tag&amp;gt;) update the tags for an ID (ID is guaranteed to exist in tagMap) delete(id: ID) delete the ID from the map (ID is guaranteed to exist in tagMap) How would you keep track of a set of all of the tags in use for use elsewhere in the program?</description>
      <content:encoded><![CDATA[<p>I want to talk about a specific problem I just worked on, and how two logically identical solutions can make a huge difference in taming the complexity of software.</p>
<p>Boiling it down to the essentials, we have a map, or dictionary, of <code>ID</code> objects to <code>Tag</code> objects, called <code>tagMap</code>. This map is built with the following three operations:</p>
<ul>
<li><code>add(id: ID, tags: Set&lt;Tag&gt;)</code>
<ul>
<li>add a new <code>ID</code> with its associated <code>Tag</code> objects  (<code>ID</code> is guaranteed to <em>not exist</em> in <code>tagMap</code>)</li>
</ul>
</li>
<li><code>update(id: ID, tags: Set&lt;Tag&gt;)</code>
<ul>
<li>update the tags for an <code>ID</code> (<code>ID</code> is guaranteed to exist in <code>tagMap</code>)</li>
</ul>
</li>
<li><code>delete(id: ID)</code>
<ul>
<li>delete the <code>ID</code> from the map (<code>ID</code> is guaranteed to exist in <code>tagMap</code>)</li>
</ul>
</li>
</ul>
<p>How would you keep track of a <em>set</em> of all of the tags in use <em>for use elsewhere in the program?</em></p>
<p>If you really want to leetcode this, here&rsquo;s the code so far:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TagManager</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>	<span style="color:#66d9ef">var</span> tagMap: [ID: Set&lt;Tag&gt;] = [:]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">add</span>(id: ID, tags: Set&lt;Tag&gt;) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>		tagMap[id] = tags
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">delete</span>(id: ID) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>		tagMap[id] = <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>	
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">update</span>(id: ID, tags: Set&lt;Tag&gt;) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>		<span style="color:#66d9ef">let</span> oldTags = tagMap[id]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>		delete(id: id, tags: oldTags)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>		add(id: id, tags: tags)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>}</span></span></code></pre></div><hr>
<p>I landed on using a new dictionary, mapping a <code>Tag</code> to the number of times that tag occurs in the <code>tagMap</code>. With that, we can simply add each tag to the dictionary on an add/update, and remove each tag on an update/remove.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TagManager</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>	<span style="color:#66d9ef">var</span> tagMap: [ID: Set&lt;Tag&gt;] = [:]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>	<span style="color:#66d9ef">var</span> tagCounts: [Tag: Int] = [:] <span style="color:#75715e">// NEW</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>					
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">add</span>(id: ID, tags: Set&lt;Tag&gt;) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>		tagMap[id] = tags
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>		<span style="color:#75715e">// NEW</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>		<span style="color:#66d9ef">for</span> tag <span style="color:#66d9ef">in</span> tags {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>			<span style="color:#66d9ef">let</span> count = tagCounts[tag] ?? <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>			tagCounts[tag] = count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>		}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">delete</span>(id: ID) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>		<span style="color:#66d9ef">let</span> tagsToDelete = tagMap[id] ?? [] <span style="color:#75715e">// NEW</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>		tagMap[id] = <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>		<span style="color:#75715e">// NEW</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>		<span style="color:#66d9ef">for</span> tag <span style="color:#66d9ef">in</span> tagsToDelete {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>			<span style="color:#66d9ef">let</span> count = tagCounts[tag] ?? <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>			<span style="color:#66d9ef">if</span> count == <span style="color:#ae81ff">1</span> { 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>				tagCounts[tag] = <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>			} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>				tagCounts[tag] = count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>			}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>		}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>}</span></span></code></pre></div><p>This <em>works</em>, but look back at what I emphasized in the question earlier: a set for use elsewhere in the program. Our conceptual model of <code>tagsInUse</code> is a set, but we have a dictionary. We can easily solve this in the public API:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">private</span>	<span style="color:#66d9ef">var</span> tagCounts: [Tag: Int] = [:]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">var</span> tagsInUse: Set&lt;Tag&gt; { Set(tagCounts.keys) }</span></span></code></pre></div><p>But why settle for fixing this in the public API? Bringing that concise conceptual model down into our own logic will help us write code thats more intentional and easier to understand. I think a good way to demonstrate the communication weakness this current solution presents is through the telephone game - explaining your logic to a colleague over the phone.</p>
<blockquote>
<p>We keep track of the <em>set</em> <code>tagsInUse</code> using a <em>dictionary</em> called <code>tagCounts</code>, where we keep count of the number of instances of that tag. So when we add a tag to the <em>set</em> <code>tagsInUse</code> for the first time, we add it to the <em>dictionary</em> <code>tagCounts</code> with a count of one. If we add it again, we update it count to 2. Now, if we remove it once, we just drop it count to 1, its still in our <em>set</em> <code>tagsInUse</code>, which is derived from the keys of <code>tagCounts</code>. Only when we remove it again, do we actually remove it from the <em>set</em> by removing the key from the <em>dictionary,</em> since the count reached zero.</p>
</blockquote>
<p>This makes sense, and can probably be followed, but again I emphasized the use of <em>set</em> and <em>dictionary</em> to point out the weird tension here between the conceptual model and the implementation. We can&rsquo;t use a set, because that data structure won&rsquo;t actually keep track of the information the way we need. But we&rsquo;re sort of <em>breaking the semantic contract</em> of a dictionary as well. We don&rsquo;t actually care about the specific count, we just care if the tag is one of the keys.</p>
<p>I think this idea, of a <em>using a dictionary</em> to <em>track a set</em> over multiple inserts and removals, is a distinct, generalizable conceptual model, separate from a regular set or a dictionary. So, lets create a new semantic contract: a <strong>Counted Set.</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CountedSet</span>&lt;Element&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> storage: [Element: Int]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>	<span style="color:#66d9ef">mutating</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">insert</span>(<span style="color:#66d9ef">_</span> element: Element) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> count = storage[element] {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>            storage[element] = count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>            storage[element] = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>	<span style="color:#66d9ef">mutating</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">remove</span>(<span style="color:#66d9ef">_</span> element: Element) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> count = storage[element] {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            <span style="color:#66d9ef">if</span> count <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> { storage[element] = <span style="color:#66d9ef">nil</span> }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>            <span style="color:#66d9ef">else</span> { storage[element] = count <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>	<span style="color:#75715e">/* Insert/Remove contentsOf Sets/Arrays */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>}</span></span></code></pre></div><p>And our code becomes trivially simple:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TagManager</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>	<span style="color:#66d9ef">var</span> tagMap: [ID: Set&lt;Tag&gt;] = [:]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>	<span style="color:#66d9ef">var</span> tagsInUse: CountedSet&lt;Tag&gt; 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">add</span>(id: ID, tags: Set&lt;Tag&gt;) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>		tagMap[id] = tags
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>		tagsInUse.insert(contentsOf: tags)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>	<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">delete</span>(id: ID) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>		tagMap[id] = <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>		tagsInUse.remove(contentsOf: tags)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>}</span></span></code></pre></div><p>And so does our explanation:</p>
<blockquote>
<p>We keep track of the <em>set</em> <code>tagsInUse</code> using a counted <em>set</em>.</p>
</blockquote>
<p>This new explanation relies on the readers knowing what a counted set is. But the counted set can be easily explained and understood outside of the context of the problem. And with that understanding, the explanation of the logic becomes explicit <em>in</em> the code through the semantics of the counted set and its documentation, while the original implementation (which is logically the exact same) has no explanation at all, requiring the inferior solution of comments.</p>
<p>On top of that, reifying the conceptual model of the counted set chunks it into a single idea into our heads, freeing up room in our limited working memory for the rest of the problem. In the original solution, the sets of <code>Tag</code> and the <code>tagMap</code> dictionary of <code>ID</code> to <code>Set&lt;Tag&gt;</code>, which don&rsquo;t break the semantic contracts of the their data structures, are easily thought of as single ideas. They don&rsquo;t clog our working memory with extra details. But the <code>tagCount</code> dictionary isn&rsquo;t just a dictionary, it&rsquo;s a dictionary with extra rules, where a key&rsquo;s values aren&rsquo;t changed arbitrarily. An implicit contract, that needs to be implemented correctly in multiple places. Multiple things to keep track of in our heads.</p>
<p>But once we go ahead and make the contract explicit, putting a label on it, our brains can chunk it and treat it just like another set or dictionary. Now, alongside our <code>tagMap</code>, our <code>tagsInUse</code> is just another simple data structure we use, with an explicit contract and conceptual model, cleanly labeled in our working memory.</p>
<p>I think this is such an essential concept, because we often don&rsquo;t even get the privilege of the telephone game. Our code may be read by someone else, in a different timezone, years after we wrote it. So instead of getting to explain to them the conceptual model we had when writing it, all of that intentionality has to be documented in the code.</p>
<p>Computer Science is a mathematical discipline: we&rsquo;re looking for a <em>correct</em> solutions. In my opinion, Software Engineering is much more of a <em>communication</em> discipline: there may be many correct solutions, but its vital to consider how your solution communicates your conceptual model to future maintainers (including yourself) in order to keep the software complexity monster in check.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Do you understand it, or do you just know it?</title>
      <link>http://localhost:1313/blog/blog/knowing_vs_understanding/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/blog/knowing_vs_understanding/</guid>
      <description>This first half of this post is a personal story, adding context to how I came to these conclusions at this point in my life. If you want to jump straight to the difference between knowing and understanding, feel free to skip to what it means to understand.&#xA;We should really read more. I was hanging out with some US Air Force officers, at the invite of a friend who himself is an officer.</description>
      <content:encoded><![CDATA[<p>This first half of this post is a personal story, adding context to how I came to these conclusions at this point in my life. If you want to jump straight to the difference between knowing and understanding, feel free to skip to <a href="#what-it-means-to-understand">what it means to understand.</a></p>
<hr>
<h3 id="we-should-really-read-more">We should really read more.</h3>
<p>I was hanging out with some US Air Force officers, at the invite of a friend who himself is an officer. We got on the topic about reading, specifically how we all really should read more. Someone made a comment about how the most successful, high ranking officers they knew always seemed to be reading something, and always had a whole bookshelf full of books in their office.</p>
<p>The cynical side of me wanted to say something about how reading all those books is impossible unless you have something driving you more then the vain, ephemeral idea of &lsquo;success.&rsquo; For most people, at least.</p>
<p>At the time, I assumed that drive had to come from some innate interest or curiosity, that had to be there before you ever started learning about the topic. That most of these high ranking officers, whether they knew it or not, were in some way interested in how organizations work and how to effectively lead. Combine that with them being put into a position to lead and/or picking up their first book on the topic, and their pursuit of knowledge began.</p>
<p>I now understand that this line of thinking was an artifact of the &lsquo;fixed mindset,&rsquo; (basically the opposite of a &lsquo;growth mindset&rsquo;) that I had just recently recognized was slowing me down. Because I had no issue reading, I&rsquo;ve read entire <em>Song of Ice and Fire</em> books in less than 2 weeks. But it was a deep interest in the story, the world, and pre-modern societies in general that fueled my rabid reading. Without that underlying interest being awoken, there&rsquo;s no way I would read hundreds of pages or blow through hours of content on something as boring as how to run an organization.</p>
<hr>
<h3 id="a-life-of-knowing">A life of knowing</h3>
<p>I was always very, very successful in school with very little effort. I was consistently called the smartest person in the room. While I&rsquo;m sure people understood that this may create a massive ego problem (and it very much did), what I&rsquo;m sure what they didn&rsquo;t understand was how they were setting me up to be very conservative in my future endeavors.</p>
<p>This phenomenon is described in detail in Carol Dweck&rsquo;s writings on <a href="https://ctl.stanford.edu/sites/g/files/sbiybj17446/files/media/file/growth_mindset_handout.pdf">growth mindset</a>, but to sum it up, when people are praised, believe it or not, it makes them happy. Unsurprisingly, this then drives them towards behavior directed at continuing to receiving that praise.</p>
<p>The catch is, when people are praised for their fixed, <em>intrinsic</em> traits, such as how smart or talented they are, that doesn&rsquo;t encourage them to seek harder challenges that are outside of their comfort zone. In fact, the opposite usually happens - they seek easier challenges. To them, failure makes them question their own identity and the self-worth that they based on that identity (I can vouch for that). Now, when you praise people for their <em>extrinsic</em> trait of <em>effort</em>, something they can directly control, well you can imagine how their behavior might differ.</p>
<p>I took pride in my ability to not just cram, but often gave people awful advice to not spend so much time trying to <em>understand</em>. You really didn&rsquo;t need to understand why, for example, the derivative of <code>cos(x)</code> was <code>-sin(x)</code>. That was just another tool in your toolbox that you needed to <em>know.</em></p>
<p>And so I continued through school and graduated college with honors, but always struggled to accomplish anything outside of my coursework. However, I always found excuses for this lack of production, cause I was just too smart to fail. I had just failed to manage my time outside my coursework. But then I graduated 6 months early, and took those 6 months off to finally do interesting something with my life.</p>
<hr>
<h3 id="beginning-to-understand">Beginning to understand</h3>
<p>My main goal at the end of those 6 months was to have an app on the iOS App Store. Not a super lofty goal, but I wanted a real, useful app, not just some gimmick. I had taken the Swift UI class at Penn State, so felt that I knew everything I needed to <em>know</em> to clean up my rushed final project, which was <a href="/blog/tags/boomic/">Boomic Music</a>. But that was such a mess, as I has rushed to get as many features as possible done during class, didn&rsquo;t spend any time on architecture, and skipped a lot of the hard problems. So I quickly pivoted to something easier: a workout app. Then I pivoted about 3-4 more times over the next few months.</p>
<p>I can&rsquo;t really pull any lessons out of those 6 months, other than to just focus on one project at a time, because I was just making the same mistakes over and over again. The real problem was that, of course, the 3 credit class I took was nowhere near enough to build an app on the scale I wanted. And I was <em>really</em> impatient. When I ran into something I didn&rsquo;t know, I wanted to know it as soon as possible and move on. Just like when I was doing my homework or studying for a test.</p>
<p>Fast forward to the end of 2023, a year since I graduated. I was six months into a very unfulfilling implementation consultant role, and had nothing to put on my resume to give me hope about that changing any time soon. I made a few commitments to myself (such as committing to a growth mindset), and after stumbling upon an article on <a href="/blog/learning/ten_things_about_learning/">10 Things Software Developers Should Learn about Learning</a>, I committed to two more things:</p>
<ul>
<li>Actually learning how to architect an app by taking my time and reading as much source code/learning materials as possible</li>
<li>Focus 100% of my creative energy on finally building Boomic. No more pivoting.</li>
</ul>
<p>The single text that kick-started my understanding of mobile architectures was Jacob Bartlett&rsquo;s blog post on <a href="https://jacobbartlett.substack.com/p/modular-architecture-for-apps">Modular Architecture for Apps</a>. Following the layered architecture, development was going much better then it had in the past, and I had some newfound confidence. Until I had to throw out 3 weeks of work due to some poor assumptions I made. The familiar fears of of failure and wasted time began to well up inside me.</p>
<p>But this time, with a growth mindset, I really reflected on what went wrong, and learned from my mistakes. Oh, and I discovered Rich Hickey.</p>
<p>Over the next few weeks, I went ahead an consumed almost every talk that man has given, and most the keynotes twice. I consistently had better ideas of how to compose my app, both during the talks and in the days after. These presentations, mostly from over a decade ago before the Swift language existed, without a line of source code, gave me so much insight and confidence to write Swift code. It gave me a deeper <em>understanding</em> of what I was building.</p>
<p>This may seem obvious, that there can be wisdom in old material. But for my past self, I just wanted to learn things once. I just wanted to know, so I could do, and move on. And if we&rsquo;re all standing on the shoulders of giants, wouldn&rsquo;t that wisdom get passed to me in the new material anyway?</p>
<hr>
<h3 id="what-it-means-to-understand">What it means to understand.</h3>
<p>My aversion to reading older material came from my impatience and desire to just <em>know</em>. Just like how I didn&rsquo;t care to know <em>why</em> the derivative of <code>cos(x)</code> was <code>-sin(x)</code>, I just wanted to know the best mobile architecture for the type of app I&rsquo;m making. Or the best database to use. Or the best <em>insert solution here</em> for <em>insert current problem here</em>. If someone had made the mistake of giving me a leadership position, if I didn&rsquo;t arrogantly assume I already knew what I was doing, I would buy a brand new bestselling book on that topic. Certainly, the author had read the last bestseller, who&rsquo;s author had read the last bestseller, and so on. And through that magical chain, all of the knowledge of the past would be bestowed upon me, who is certainly smart enough to put it to effective use.</p>
<p>But I now finally understand why simply knowing is insufficient. Because its simply <em>impossible</em> to ever understand and truly grasp complex topics from one perspective.</p>
<p>Now, if I was in the Matrix and could be plugged directly into that last authors brain, maybe then one perspective would be sufficient. But we don&rsquo;t live in the Matrix, and as Marco Giancotti aptly paints with that example, <a href="https://aethermug.com/posts/language-is-a-bottleneck-for-thought">language is a bottleneck for thought</a>. While visual mediums can communicate be of magnitude more (a picture is worth a thousand words after all), as of now, we still have no way to communicate the exact intricacies of our mental models of the world to others. Through trying to start writing blog posts, I&rsquo;ve learned just how futile that can feel.</p>
<p>I felt like my world opened up and I finally understood software design after watching Rich Hickey&rsquo;s <a href="/blog/learning/simple_made_easy">Simple Made Easy</a>, but then I watched his <a href="/blog/learning/simplicity_matters">Simplicity Matters</a>, basically the same talk given later, and was surprised how much more I learned. Then I went back and watched the original again, and realized there was so much more I missed.</p>
<p>Listening to Ron Westrum talk about generative organizations on <a href="/blog/learning/idealcast">The Idealcast</a>, again I felt like my world opened up, and I finally understood what made some organizations great (and why work in a bureaucratic organization could feel so <a href="https://en.wikipedia.org/wiki/Sisyphus">&lsquo;Sisyphusian&rsquo;</a>).  But then, I listened to Elisabeth Hendrickson and Steven Spear&rsquo;s first appearances on the show, and not only did it give me a deeper understanding, but it affirmed and built on so much of what Ron Westrum had described in his episodes.</p>
<p>And all the sudden, just like those high ranking officers we all wanted to emulate, I found my bookshelf full of books.</p>
<p>It was when I started reading the classic <a href="/blog/learning/the_mythical_man_month"><em>The Mythical-Man Month</em></a> that the difference between knowing and understanding really clicked. I would have never considered reading this book in the past, with it being released all the way back in 1975. I mean c&rsquo;mon, even the way software was developed in the 90s seemed like a nightmare (git was released in <em>2005!</em>), what could this guy know?</p>
<p>But when I was reading it, I found myself constantly making connections to what I had learned previously from Rich Hickey and the Idealcast. Not only was I reading things that affirmed those lessons, but it was reading things that at first seemed to go against my model of the world that made me think the hardest and taught me the most. Things that made me <em>challenge</em> my understanding of the world. And at the end, that understanding only became sharper.</p>
<p>At the end of the day, while it might feel like we think in words, our brains are enormous neural networks with billions of lossy nodes. Even the most prolific thinkers and writers in human history couldn&rsquo;t possibly communicate the complete and deep understanding that they&rsquo;ve built up through <em>any</em> medium. No matter how many times I listen to everything Rich Hickey has ever said, despite his best efforts, I will never see and understand the world the way he does.</p>
<p>Only through our own constant learning and experience can we hope to build up our own, unique, but just as deep, understanding. As long as we are constantly receiving new inputs, whether through experience, classes, lectures, keynotes, blogs, or the books on our cool bookshelves we may have originally bought to make us look smart, we can train our neural networks to have as rich and thorough of an understanding as the leaders we admire and try to emulate.</p>
<p>And for all the impatient knowers out there who just want to get stuff done, take it from one of your own. To master a complex topic like software, and to really do it right, you need to learn how to <em>understand</em>, or you&rsquo;ll never become that expert who just gets stuff done. After all,</p>
<blockquote>
<p>Beginners Reason, Experts Recognize.</p>
<p>&mdash; <a href="/blog/learning/ten_things_about_learning/">10 Things Software Developers Should Learn about Learning</a></p>
</blockquote>
<p>And that&rsquo;s why those officers have all those books.</p>
<hr>
<h3 id="is-there-still-room-for-knowing">Is there still room for knowing?</h3>
<p>Yes, that was not rhetorical. Before we can understand something, we need to know as much as possible. I only made those deep connections reading Mythical Man-Month because I had remembered what Rich Hickey, Elisabeth Hendrickson, and Steven Spear had said. It was those connections between the different perspectives I knew that lead to understanding. I think the general &rsquo;three pillars&rsquo; model of language learning I applied while I learned Japanese in college applies here:</p>
<ol>
<li>Learn the words, so you know what the they&rsquo;re saying.</li>
<li>Learn the grammar, so you understand how those words go together.</li>
<li>Engage with the language as much as possible.</li>
</ol>
<p>I needed to know the words and the grammar, so I could engage with the language and build those connections of deep understanding.</p>
<p>But we really need to be conscious of what we&rsquo;re doing, and why we&rsquo;re doing it. We don&rsquo;t want to waste our time trying to apply an understanding strategy on things we should just know. Like with Japanese words: there was no getting around it, I needed to memorize the words. I needed to just know them, along with the grammar rules, so when I heard a sentence, I could make the connections and understand the sentence.</p>
<p>This is a mistake I see my current organization making. Our product is a Goliath of an accounting program without any cohesive documentation (even a lot of the <em>source code</em> is hidden from most devs). Instead, they encourage people build a deep understanding of <em>where</em> the code is or <em>where</em> a fix should be to align with the current system. This may sound confusing, but for various reasons (configuration code in a relational SQL database, classes have cryptic 5-8 letter code names, inter-class calls done through opaque messages, etc.), even finding where code is can be difficult. Basically, to make any changes, whether adding something or fixing a bug, the procedure is to go to that part of the system in the GUI and &lsquo;figure out&rsquo; where to make the changes.</p>
<p>And so it really does take a decade plus to build a deep understanding of how this system works. I&rsquo;ve met people who&rsquo;ve done it, its as impressive as it is tragic. Specific system configuration sits squarely on the <em>know</em> side of the fence, and the ease of access to that information needs to be highly optimized for. What is on the other side of the fence is <em>understanding</em> how different system architectures and configurations are better for certain use cases, and the emerging properties they will have when deployed at scale. That takes seeing and experiencing many different configurations before that understanding will ever be built up. Unfortunately, most members of my organization have spent their entire career with this system, and therefore struggle to even imagine any alternatives.</p>
<p>I started my <a href="/blog/learning/">learning collection</a> at the end of last year, to collect all the information I wanted to learn and be able to reference, so I could understand the complex topic of software. On top of my folder for software engineering, I now have folders for, leadership, languages, writing, music, and life. Only recently have I realized the true power in that has been how it optimized the speed of knowing, so I could finally build deep understandings of complex topics.</p>
<hr>
<h3 id="to-summarize">To Summarize:</h3>
<ul>
<li>It is impossible to understand a complex topic from a single source, due to the bottlenecks inherit in any medium of communication. So to understand complex topics, we need to be constantly learning and taking in as much input as possible to build up our internal neural networks and mental models of the world. There&rsquo;s no way around that.</li>
<li>We need to be conscious of what needs deep understanding to be effective at, and what should just be known. Then, we need to optimize for quick and easy access to that which should be known.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Boomic Architecture: Composers and Instruments</title>
      <link>http://localhost:1313/blog/blog/boomic_architecture/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/blog/boomic_architecture/</guid>
      <description>The first time I set out to make Boomic, I didn&amp;rsquo;t think about architecture at all. The app quickly became a coupled disaster, and making the smallest changes felt daunting. This time around, I committed to learning and understanding software design and architecture. To learn to build a composable system, designed for change. This is how I started, where I went wrong, and where I am now.&#xA;I ended up starting my development based on the layered architecture from Jacob Bartlett&amp;rsquo;s excellent post on Modular Architecture for Apps.</description>
      <content:encoded><![CDATA[<p>The first time I set out to make Boomic, I didn&rsquo;t think about architecture at all. The app quickly became a coupled disaster, and making the smallest changes felt daunting. This time around, I committed to learning and understanding software design and architecture. To learn to build a composable system, designed for change. This is how I started, where I went wrong, and where I am now.</p>
<p>I ended up starting my development based on the layered architecture from Jacob Bartlett&rsquo;s excellent post on <a href="https://jacobbartlett.substack.com/p/modular-architecture-for-apps">Modular Architecture for Apps</a>. I was closely following the architecture of their <a href="https://github.com/jacobsapps/bev17/tree/main?tab=readme-ov-file">Bev Sample App</a>, using the Repository pattern, featured in his series on <a href="https://jacobbartlett.substack.com/p/async-unit-testing-in-swift-the-comprehensive">Async Unit Testing</a>. I highly recommend <a href="https://jacobbartlett.substack.com/">Jacobs Tech Tavern</a> to any iOS app developers.</p>
<p>The &lsquo;Repository Pattern&rsquo; is where you create a single <code>Repository</code> component that serves the data to the UI. The UI doesn&rsquo;t have to worry about where the data is coming from, while the repository can combine data from different sources. In Bev, Jacob shows a use case of grabbing local, cached data from a database, while fetching the most up-to-date data from an API. Here&rsquo;s cut down version of what this looks like in Bev:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">returnMultipleTimes</span>() async <span style="color:#66d9ef">throws</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>	
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>	<span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> beers = <span style="color:#66d9ef">try</span>? await db?.getBeers() {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>		beersPublisher.send(beers)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>	}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>	
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>	<span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>		<span style="color:#66d9ef">let</span> beers = <span style="color:#66d9ef">try</span> await api.getAllBeers()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>		<span style="color:#66d9ef">try</span>? await db?.save(beers: beers)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>		beersPublisher.send(beers)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>	} <span style="color:#66d9ef">catch</span> { <span style="color:#75715e">/* handle error */</span> }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>}</span></span></code></pre></div><p>My first goal for Boomic was to simply load audio files from a local directory into a <code>Database</code> as <code>Song</code> objects, then load them from the database onto the UI. I needed some kind of <code>MediaFileInterface</code> to load audio files from a root directory and extract their metadata into the <code>Song</code> objects. Thinking that the database was likely the only thing that needed to load files this way, as the rest of my app could just use the songs from the database, I went with a design like this:</p>
<p><img src="/blog/images/original_database.svg" alt="Original Database with coupled file interface"></p>
<p>It was after watching Rich Hickey&rsquo;s <a href="/blog/learning/design_composition_performance.md">Design, Composition, and Performance</a> that I realized what kind of mistake I was making with the database.</p>
<p>I thought that simply by using Swift&rsquo;s protocols, I was keeping these components decoupled. I could easily switch from a local to a remote directory with the same <code>MediaFileInterface</code> protocol. But I was still coupling the <code>Database</code> to the fact that it had to know where it was getting its <code>Song</code> objects from. This had flown under my radar until I thought about Apple Music. A long-term goal of Boomic is to be able to sync your Apple Music library alongside your local library. Since I want to have the same tags and ratings for both Apple Music and local songs, I wanted to store them in the same database. Assuming I did that that now, the architecture would look like this:</p>
<p><img src="/blog/images/original_database_expanded.svg" alt="Original Database with two coupled file interfaces"></p>
<p>I would need to edit the <code>Database</code> itself, its public interface, and the repository that calls it. By just making the database aware of a protocol to get new songs, I was giving the database an extra responsibility: don&rsquo;t just store the songs, but get the new ones as well. Lets remove that separate responsibility and see what it looks like:</p>
<p><img src="/blog/images/decoupled_database.svg" alt="Update, decoupled database with separate file interface"></p>
<p>Now, the <code>Repository</code> can simply have two different functions for each different source. The <code>Database</code> itself can be designed in a much simpler, more generic manner, without worrying where it is getting new data from. More importantly, when I want to add the Apple Music support, I now only have to change the app-specific <code>Repository</code>. I simply a create a new composition of a new component, the <code>AppleMusicInterface</code>, and an old one, the <code>Database</code>.</p>
<hr>
<h3 id="breaking-it-down-composers-and-instruments">Breaking it down: Composers and Instruments</h3>
<p>I really liked the general repository pattern, and felt it could be extended outside the realm of data operations. As I mentioned earlier, it was watching <a href="/blog/learning/design_composition_performance.md">Design, Composition, and Performance</a> when the value of the repository pattern really clicked for me. So, lets borrow some vocabulary (albeit with a slightly different use) and see how it works:</p>
<ul>
<li><strong>Instruments:</strong> Single responsibility, usually generic components.</li>
<li><strong>Composers</strong>: Components that coordinate one or more instruments to achieve something specific.</li>
</ul>
<p>In my app so far, the <code>Database</code>, <code>MediaFileInterface</code>, <code>AppleMusicInterface</code>, and any other sources of data such as an <code>ImageCache</code> are the instruments. Each instrument does their specific tasks, is completely decoupled from other instruments, and can be reused in other parts of the program. Then, the <code>Repository</code> is a composer that handles the specific needs of my app by, well, composing these instruments together.</p>
<hr>
<h3 id="composers-as-instruments">Composers as Instruments.</h3>
<p>I want to make one thing about this design philosophy clear: Just because something is an instrument, doesn&rsquo;t mean it cannot be composed of other instruments. An example of this is how I am currently storing transactions.</p>
<p>To store transactions as they&rsquo;re received, I built a generic <code>LogStore</code> class that saves <code>Codable</code> objects at a key in the order they&rsquo;re received, like a standard log. This is pretty clearly an instrument: single-responsibility, generic, ready to be composed into various purpose specific components. But the <code>LogStore</code> itself was composed with another instrument: the <code>SimpleStore</code>.</p>
<p>The <code>SimpleStore</code> itself just saves and overwrites the object saved at its key. So the most basic implementation of a <code>LogStore&lt;T&gt;</code> can just use a single <code>SimpleStore&lt;[T]&gt;</code>, which is exactly what I have done for now as my proof-of-concept:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LogStore</span>&lt;Log: Loggable&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">let</span> storage: SimpleStore<span style="color:#f92672">&lt;</span>[Log]<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">init</span>(key: String) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        <span style="color:#66d9ef">self</span>.storage = SimpleStore(key: key)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">save</span>(<span style="color:#66d9ef">_</span> log: Log) async <span style="color:#66d9ef">throws</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        <span style="color:#66d9ef">let</span> pastLogs = <span style="color:#66d9ef">try</span> await storage.load()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#66d9ef">var</span> logs = pastLogs ?? []
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        logs.insert(log, at: <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#66d9ef">try</span> await storage.save(logs)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>	<span style="color:#75715e">/* ... */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>}</span></span></code></pre></div><p>This is pretty inefficient, since as logs are written to disk right away. A better version of this would be using multiple simple stores, with a cache <code>SimpleStore</code> for quickly saving of the most recent logs, which are periodically merged them in with the older logs from another <code>SimpleStore</code> in the background. Either way, the <code>LogStore</code> here an example of a composer: composing one or more instances of the generic <code>SimpleStore</code> instrument. But, it itself is a generic, composable instrument, that I use to store transactions now, and probably logs in the future.</p>
<p>I think Rich Hickey really illustrates this point well at from <a href="https://youtu.be/QCwqnjxqfmY?t=2479&amp;si=jhGajdysPBKZE5As">41:19-42:42</a> in, you guessed it, Design, Composition, and Performance! <a href="https://www.arturia.com/stories/yvesusson-insideamodularmind">Yves Usson</a>, who designed the synthesizer, composed the synthesizer it out of machines that themselves are individual instruments, or at least would be in this current mental model. Then, the synthesizer itself is an instrument available to musicians to be composed with other instruments.</p>
<hr>
<h3 id="isnt-this-obvious">Isn&rsquo;t this obvious?</h3>
<p>Isn&rsquo;t this just another way of saying &lsquo;we should be building composable systems?&rsquo; Yeah, pretty much, but I think there is a lot of value in reframing the way we think about our systems with specific terminology and strong analogies. In just writing this post and applying this thinking to the system that inspired it, I realized that the <code>MediaFileInterface</code>, which doesn&rsquo;t necessarily violate the Single Responsibility Principle (translate all the files in a root directory into <code>Song</code> objects), is both not generalizable, and could be broken apart into two separate, more generalizable, instruments.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">// old</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">let</span> newSongs = MediaFileInterface().newSongs(existing: existingSongs)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#75715e">// new</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#66d9ef">let</span> knownFiles = existingSongs.map { $0.file }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#66d9ef">let</span> newFiles = FileInterface().all([<span style="color:#e6db74">&#34;mp3&#34;</span>, <span style="color:#e6db74">&#34;flac&#34;</span>], ignoring: knownFiles)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span><span style="color:#66d9ef">let</span> newSongs = newFiles.map { Song(fromFile: $0) }</span></span></code></pre></div><p>For me, it really is that reframing that can bring a lot of value. I was comfortable calling the <code>MediaFileInterface</code> a simple, single responsibility component that only had one public function. And it was only 60 lines. But it was a specific component I built for a specific purpose. When I want to play guitar in a new key, do I buy a whole new guitar? No, I take my existing guitar, and just put on, <em>or compose it with,</em> a capo!</p>
<p>So, after reframing the question, I was not comfortable calling the <code>MediaFileInterface</code> a good instrument. Which led me to asking &ldquo;Could this be composed of simpler instruments?&rdquo; and &ldquo;Could this be more generic?&rdquo; and ended with me building the new, more generic <code>FileInterface</code>, which I am already using in another part of the <code>Repository</code>.</p>
<p>To summarize, I think we can build the vast majority of what we create with generic instruments and a few composers. Whenever we do something specific, we should try to break it down into generic instruments, and build those instruments up with simpler and simpler instruments. This will give us many a huge toolbox of generic, testable instruments, which can easily be rearranged to make changes.</p>
<hr>
<h3 id="in-practice">In Practice</h3>
<p>Finally back to the app, what does Boomic look like today. I am still some time away from the MVP, and so plan on updating this part of the post down the road. Especially if (more likely when) I find I didn&rsquo;t have as complete of an understanding as I thought I had. But here is the current structure. Relatively flat, but much, much less coupled then its predecessor:</p>
<p><img src="/blog/images/boomic_arc.svg" alt="boomic_architecture"></p>
<ul>
<li><strong><code>Repository</code></strong>: Composer of the data instruments, specifically for the UI.
<ul>
<li><strong><code>Transactor</code></strong>: Serially stores library transactions, and publishes a new <code>DataBasis</code> to reflect that transaction.
<ul>
<li><strong><code>DataBasis</code></strong>: Immutable value of the entire library.  Progression of state tracked by the <code>Transactor</code>.</li>
</ul>
</li>
<li><strong><code>QueryEngine</code></strong>: Queries a <code>DataBasis</code> value.</li>
<li><strong><code>FileInterface</code></strong>: Provides enumerations of specified file extensions from a root directory.</li>
<li><strong><code>MetadataLoader</code></strong>: Extracts metadata from audio files, both embedded and from the surrounding files.</li>
</ul>
</li>
<li><strong><code>Player</code></strong>: Composer of the audio playback instruments. Has a fair amount of state.
<ul>
<li><strong><code>Engine</code></strong>: The interface to the library that makes the system calls to playback audio. Each song gets its own engine, allowing for pre-loading. Has a fair amount of state.</li>
<li><strong><code>Queue</code></strong>: An immutable value representing the queue. Progression of state tracked by the <code>Player</code>.</li>
<li><strong><code>Mixer</code></strong>: Applies EQ and Effects to the <code>Engine</code>.</li>
</ul>
</li>
<li><strong><code>ImageCache</code></strong>: Shared cache, keys embedded album art with MD5 hashes to prevent initializing the same images over and over.</li>
</ul>
<h5 id="immediate-plans">Immediate Plans</h5>
<ul>
<li>Create a <code>LiveQueryEngine</code> that tracks changes and updates views when the <code>DataBasis</code> updates.</li>
<li>Have the <code>Player</code> directly access the <code>Repository</code> instead of just sharing the <code>ImageCache</code> so it can respond to <code>DataBasis</code> updates.</li>
<li>Look into making the <code>Engine</code>, <code>Queue</code>, and <code>Transactor</code>, classes more generic. They all currently rely on this app&rsquo;s custom data types, but don&rsquo;t necessarily need to.</li>
</ul>
<p>There is a lot more work to do to make the immutable <code>DataBasis</code> pattern work with Swifts observation frameworks, and make the UI reactive to specific changes. I have reflected on whether keeping the pattern is worth it and have decided to continue it. More on that in a future post.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How learning Japanese has changed the way I think about programming languages.</title>
      <link>http://localhost:1313/blog/blog/spoken_vs_programming_languages/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><author>kevink2019@gmail.com (Kevin Kelly)</author>
      <guid>http://localhost:1313/blog/blog/spoken_vs_programming_languages/</guid>
      <description>I was having a conversation with a friend the other day, who like many people who get paid to write code, has no formal education in programming, like a CS degree or a bootcamp. They were talking about how their employer wanted them to learn C# (they had mostly been using python) for a potential .NET app, and so they had paid for a C# course.&#xA;While this makes sense as one of the quickest ways to get up to speed with a certain language, I recommended they pay attention to and learn the fundamental constructs that C# shares with Python, and where it differs.</description>
      <content:encoded><![CDATA[<p>I was having a conversation with a friend the other day, who like many people who get paid to write code, has no formal education in programming, like a CS degree or a bootcamp. They were talking about how their employer wanted them to learn C# (they had mostly been using python) for a potential .NET app, and so they had paid for a C# course.</p>
<p>While this makes sense as one of the quickest ways to get up to speed with a certain language, I recommended they pay attention to and learn the fundamental constructs that C#  shares with Python, and where it differs.</p>
<p>Most professional programmers and software engineers have used, or at least dabbled with, many different languages throughout their careers. To the point where switching to another language becomes almost trivial. We can design systems with these fundamental constructs, then implement them in pretty much any language.</p>
<p>Once we obtain that deep understanding of fundamental constructs, we can become very confident and proud of our ability to &rsquo;think in computer.&rsquo; Which is essential, we are writing for computers after all. But we often fail to see the drawbacks in limiting our thinking like that. I knew that we should strive for clean, &lsquo;readable&rsquo; code, but I didn&rsquo;t truly understand the essence of that goal until I tried to think in another spoken language.</p>
<hr>
<h3 id="to-understand-or-to-be-understood">To understand or to be understood.</h3>
<p>The Japanese word that inspired this line of thinking was 分かる (pronounced <em>wakaru</em>), which is a verb that <em>translates</em> to &rsquo;to understand.&rsquo; I had learned it a few years back in college in preparation to study abroad, but covid had other plans for my time in college. Now as a graduate, I decided to start learning Japanese again because it was quite fun, and I&rsquo;m no longer in a rush to learn it all within two years.</p>
<p>One of the many details I often brushed pass the first time around was whether verbs were <em>intransitive</em> or <em>transitive</em>. That&rsquo;s whether or not the verb is performed by the subject on itself (intransitive) or on a direct object (transitive). Basically, in the sentence &lsquo;<em>I</em> am running,&rsquo; running is intransitive, because I, the subject, is what is running. On the other hand, in the sentence &lsquo;I am running the <em>dishwasher,</em>&rsquo; running is transitive, because I, the subject, am performing the verb on the dishwasher, the direct object.</p>
<p>To my horror, I realized 分かる was intransitive. In my many conversations (mostly with myself, I have been terrified to make this exact kind of mistake online) I have had in Japanese these last few years, I have been using 分かる wrong, as a transitive verb.</p>
<p>The <a href="https://www.wanikani.com/vocabulary/%E5%88%86%E3%81%8B%E3%82%8B">Wanikani explanation</a> of the word says it best, so I&rsquo;ll just quote it here:</p>
<blockquote>
<p>This word means to <em>understand</em>, which might surprise you if you remember that the kanji 分 means <em>part</em>. Think of it this way: to understand something you have to break it down into its parts to see how it works.</p>
<p>Watch out, though, because whereas in English you understand something, in Japanese the thing you understand is the grammatical subject (it&rsquo;s doing the action). So, a more literal meaning for this is <em>to be understandable</em>. In other words, there&rsquo;s no object, and 分かる is intransitive, meaning it happens on its own. The かる ending is a hint, because verbs with かる as okurigana (kana added to the kanji) are usually intransitive.</p>
</blockquote>
<p>To me, this is a completely different <em>mental model</em>, almost a different way of thinking. Lets borrow that word <em>model</em> and take a look at at what I mean. If I wanted to say &lsquo;I understand that book&rsquo; in Japanese, I would say「その本が分かる.」Lets break that down real quick:</p>
<table>
<thead>
<tr>
<th>&lsquo;Word&rsquo;</th>
<th>Pronounciation</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>その</td>
<td>sono</td>
<td>that (object)</td>
</tr>
<tr>
<td>本</td>
<td>hon</td>
<td>book</td>
</tr>
<tr>
<td>が</td>
<td>ga</td>
<td>subject marker, marking その本 as the subject</td>
</tr>
<tr>
<td>分かる</td>
<td>wakaru</td>
<td>to be understandable</td>
</tr>
</tbody>
</table>
<p>So then, lets take a look at how the models differ in each language:</p>
<table>
<thead>
<tr>
<th>Term</th>
<th><em>Model</em></th>
<th>In a sentance</th>
<th>Translation of the <em>model</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>To understand</td>
<td>To understand</td>
<td>I understand that book</td>
<td>その本を分かる (grammatically incorrect)</td>
</tr>
<tr>
<td>分かる</td>
<td><em>To be understandable</em></td>
<td>その本が分かる</td>
<td>That book is understandable.</td>
</tr>
</tbody>
</table>
<p>The only difference between the correct sentence and the one I would&rsquo;ve said is that I would have replaced が, the &lsquo;subject marker,&rsquo; with を, the &lsquo;direct object marker.&rsquo; Instead of the book, I as the speaker would implicitly be the subject of that sentence. Which, of course, is a grammatically incorrect use of the Japanese verb, but makes perfect sense to me if I am using my English model.</p>
<p>Now, whenever I do my Wanikani flashcards, I always try and take care to answer with the meaning that&rsquo;s the closest <em>model</em> to the word, which is not necessarily the closest <em>translation.</em></p>
<p>This fundamental difference in the modeling everyday situations is reflected even stronger in the closest translations of the words &rsquo;to like&rsquo; and &rsquo;to want,&rsquo; which are 好き (pronounced <em>suki</em>) and 欲しい (pronounced <em>hoshii</em>) respectively. You might be thinking, &ldquo;Are they just like 分かる in the previous example, where they&rsquo;re just intransitive verbs?&rdquo; Nope, they&rsquo;re <em><strong>adjectives</strong></em>.</p>
<table>
<thead>
<tr>
<th>Term</th>
<th><em>Model</em></th>
<th>In a sentance</th>
<th>Translation of the <em>model</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>To like</td>
<td>To like</td>
<td>I like that book</td>
<td>その本を好きだ (<em>very</em> grammatically incorrect)</td>
</tr>
<tr>
<td>好き</td>
<td>is likeable</td>
<td>その本が好きだ</td>
<td>That book is likeable.</td>
</tr>
</tbody>
</table>
<p>I absolutely could not wrap my head around this general model when I first learned it. When we use adjectives in English, we are generally either saying an objective fact, or we preface our subjective opinions with the fact that they are, well, opinions. I mean, if you were struggling to grasp some LeetCode problem and asked me for help, and I walked over and said &lsquo;That problem is understandable.&rsquo; You might think I&rsquo;m insulting you!</p>
<p>But Japanese is a <em>heavily</em> context based language. So when I say a thing is understandable, it is generally understood to be my point of view of the situation, not a comment on whether the thing is easy to understand.</p>
<hr>
<h3 id="but-what-does-this-have-to-do-with-programming-languages">But what does this have to do with programming languages?</h3>
<p>I think the weight of the word language in programming <em>language</em> is often lost on us. Just like how I have to rewire my brain to think in a Japanese model, I had to do the same when I was first learning to program, just in a model of computation. Thinking in variables, if/else blocks, loops, etc. But unlike when I use my English model in a Japanese sentence, using an unclear or incorrect model to solve a problem might not just result in harmless little grammar mistakes, but it could have real world consequences. Even if you&rsquo;re confident in you and your team&rsquo;s ability to &rsquo;think in computer,&rsquo; you should have no faith in their ability to &lsquo;<em>communicate</em> in computer.&rsquo; Similar to Japanese, programming languages themselves can be dangerously context dependent, and far too much can get lost in translation.</p>
<p>Think back to the explanation of those Japanese sentences. Presuming you&rsquo;re a native English speaker, to understand the meaning of the Japanese sentences, you needed to know both:</p>
<ul>
<li>How the sentence was built via the <em>Japanese model.</em></li>
<li>The message being communicated via the <em>English translation.</em></li>
</ul>
<p>I think the same thing is going on whenever we write programs. We build our code &lsquo;sentences&rsquo; in a <em>computer model</em> to be executed. But the computer isn&rsquo;t the only one who needs to understand our code: people need to as well.</p>
<p>So, we need to focus on being explicit in the intention of our code by including translation, the actual meaning we&rsquo;re trying to communicate, <em>within</em> the code.</p>
<p>Remember the mistranslation that can occur from earlier if we tried to communicate with a different model:</p>
<ul>
<li>&ldquo;That problem is understandable.&rdquo;</li>
<li><em>(Is he insulting me?)</em> &ldquo;I think its pretty difficult.&rdquo;</li>
</ul>
<p>These same mistranslations, inaccurate assumptions about another&rsquo;s intention, will occur when we try and communicate in computer models. A dead simple example (imagining no documentation):</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>sleep(<span style="color:#ae81ff">2</span>) <span style="color:#75715e">// minutes, seconds, microseconds? you might not have the context, but the computer knows.</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#66d9ef">let</span> SECONDS = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>sleep(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>SECONDS) <span style="color:#75715e">// this is the exact same model with an included translation</span></span></span></code></pre></div><p>A little anecdote I like to remember this concept by, when I went to sports camps as a kid, something we were always told was to &ldquo;stay on the balls of your feet.&rdquo; I mistranslated their message of &ldquo;keep your weight forward&rdquo; as &ldquo;keep those heels <em>off</em> the ground buddy.&rdquo; I have <em>massive</em> calves now. What may seem obvious to you might fly right over someone else&rsquo;s head.</p>
<p>But whats far more likely then a simple mistranslation, and what I&rsquo;d wager you&rsquo;ve encountered many more times, is when there is <em>nothing</em> to translate. When your reading some code and you sit there, thinking:</p>
<blockquote>
<p>What on <em>earth</em> were they trying to do here? What could their intention possibly have been?</p>
</blockquote>
<p>At this point, all bets are off, who knows if you&rsquo;re going to translate that code correctly.</p>
<p>I could take the time to come up with some more examples, but I think I would have a hard time not accidentally plagiarizing these two excellent <a href="/blog/learning/code_aesthetic">CodeAesthetic</a> videos. In the examples they give, pay attention to how the function (the model) of the code doesn&rsquo;t change at all, but the added context (the translation) helps make the code more understandable and maintainable.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=-J3wNP6u5YU">Naming Things in Code (7:24)</a></li>
<li><a href="https://www.youtube.com/watch?v=Bf7vDBBOBUA">Don&rsquo;t Write Comments (5:54)</a></li>
</ul>
<p>To take this one last step forward: when we fail to write our translations down, what we end up writing might not even match what we had in our heads. While thought is <a href="/blog/blog/knowing_vs_understanding">deep and intricate</a>, its also a by nature a <a href="/blog/learning/language_is_a_bottleneck">lossy medium</a>. Don&rsquo;t add more loss for no reason.</p>
<blockquote>
<p>&ldquo;Writing the decisions down is essential. Only when one writes do the gaps appear and the inconsistencies protrude. The act of setting turns out to require hundreds of mini decisions, and if the existence of these that distinguishes clear, exact policies from the fuzzy ones.&rdquo;</p>
<p>&mdash; Fred Brooks, <a href="/blog/learning/the_mythical_man_month"><em>The Mythical Man-Month</em></a></p>
</blockquote>
<p>If writing in the model of our native tongues requires &ldquo;hundreds of mini decisions&rdquo;, imagine what happens when we try to skip directly to a foreign computational model without first distinguishing &ldquo;clear, exact policies from the fuzzy ones.&rdquo;</p>
<hr>
<h3 id="to-summarize">To Summarize:</h3>
<ul>
<li>We are fundamentally translating from a human language mental model to a computational, digital model when we write software.</li>
<li>We should always be as explicit as possible with our intentions when we write software, making clear our <em>translations</em> of the <em>models</em>, being very specific so we can:
<ul>
<li>Better communicate our intentions to our teams (and our future selves).</li>
<li>Confirm what we write matches our original intention.</li>
<li>Encapsulate those models into simple components we can easily think about the context of a system.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
